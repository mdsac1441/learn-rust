// https://docs.substrate.io/quick-start/

https://docs.substrate.io/fundamentals/

https://docs.substrate.io/fundamentals/why-substrate/

https://docs.substrate.io/fundamentals/architecture/

https://docs.substrate.io/fundamentals/node-and-network-types/

https://docs.substrate.io/fundamentals/runtime-development/

https://docs.substrate.io/fundamentals/consensus/

https://docs.substrate.io/fundamentals/transaction-types/

https://docs.substrate.io/fundamentals/transaction-lifecycle/


Most pallets are composed with some combination of the following sections:

Imports and dependencies
Pallet type declaration
Runtime configuration trait
Runtime storage
Runtime events
Hooks for logic that should be executed in a specific context
Function calls that can be used to execute transactions

For example, if you wanted to define a custom pallet, you might start with a skeleton structure for the pallet similar to the following:

// Add required imports and dependencies
pub use pallet::*;
#[frame_support::pallet]
pub mod pallet {
 use frame_support::pallet_prelude::*;
 use frame_system::pallet_prelude::*;

 // Declare the pallet type
 // This is a placeholder to implement traits and methods.
    #[pallet::pallet]
    #[pallet::generate_store(pub(super) trait Store)]
    pub struct Pallet<T>(_);

 // Add the runtime configuration trait
 // All types and constants go here.
 #[pallet::config]
 pub trait Config: frame_system::Config { ... }

 // Add runtime storage to declare storage items.
 #[pallet::storage]
 #[pallet::getter(fn something)]
 pub type MyStorage<T: Config> = StorageValue<_, u32>;

 // Add runtime events
 #[pallet::event]
 #[pallet::generate_deposit(pub(super) fn deposit_event)]
 pub enum Event<T: Config> { ... }

 //  Add hooks to define some logic that should be executed
 //  in a specific context, for example on_initialize.
 #[pallet::hooks]
 impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> { ... }

 // Add functions that are callable from outside the runtime.
 #[pallet::call]
 impl<T:Config> Pallet<T> { ... }

}




Viewing documentation for Substrate packages:
cargo doc --package <spec> --open
Replacing <spec> with one of the following (i.e. cargo doc --package substrate --open):


cargo check -p node-templete-runtime // its fastest way to compile code it doesn't build actually any of the binaries so its more faster than cargo build


